steps:
  # ステップ1: サービス存在チェック
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "=== サービス存在チェック ==="
        
        # Cloud Runサービスとして存在するかチェック
        if gcloud run services describe hello-world --region=${_REGION} 2>/dev/null; then
          echo "✅ 既存のCloud Runサービスが見つかりました"
          echo "update" > /workspace/deploy_mode.txt
          
          echo "現在の設定:"
          gcloud run services describe hello-world --region=${_REGION} \
            --format="table(
              status.url,
              status.ingress,
              spec.template.spec.containers[0].resources.limits.memory,
              spec.template.spec.timeoutSeconds,
              spec.template.metadata.annotations['autoscaling.knative.dev/maxScale']
            )"
        else
          echo "📝 既存サービスが見つかりません"
          echo "create" > /workspace/deploy_mode.txt
        fi
        
        DEPLOY_MODE=$(cat /workspace/deploy_mode.txt)
        echo ""
        echo "デプロイモード: $DEPLOY_MODE"
        
        echo ""
        echo "=== 置換変数の確認 ==="
        echo "リージョン: ${_REGION}"
        echo "メモリ: ${_MEMORY}"
        echo "タイムアウト: ${_TIMEOUT}"
        echo "最大インスタンス: ${_MAX_INSTANCES}"
        echo "最小インスタンス: ${_MIN_INSTANCES}"
        echo "環境: ${_ENVIRONMENT}"
        echo ""
    id: 'check-service'

  # ステップ2: 既存サービス更新（条件付き実行）
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        DEPLOY_MODE=$(cat /workspace/deploy_mode.txt)
        
        if [ "$DEPLOY_MODE" = "update" ]; then
          echo "=== 既存サービスの更新 ==="
          
          # Cloud Runサービスとして更新
          gcloud run services update hello-world \
            --region=${_REGION} \
            --no-allow-unauthenticated \
            --ingress=all \
            --memory=${_MEMORY} \
            --timeout=${_TIMEOUT} \
            --max-instances=${_MAX_INSTANCES} \
            --min-instances=${_MIN_INSTANCES} \
            --set-env-vars=ENVIRONMENT=${_ENVIRONMENT},ACCESS_TYPE=authenticated \
            --verbosity=info
          
          echo "✅ 既存サービス更新完了"
        else
          echo "既存サービスが見つからないため、このステップをスキップします"
        fi
    id: 'update-service'
    waitFor: ['check-service']

  # ステップ3: 新規サービス作成（条件付き実行）
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        DEPLOY_MODE=$(cat /workspace/deploy_mode.txt)
        
        if [ "$DEPLOY_MODE" = "create" ]; then
          echo "=== 新規関数の作成 ==="
          
          # Cloud Run Functionsとして新規作成
          gcloud functions deploy hello-world \
            --gen2 \
            --runtime=python311 \
            --region=${_REGION} \
            --source=./cloud_run_functions \
            --entry-point=hello_world \
            --trigger=http \
            --no-allow-unauthenticated \
            --ingress-settings=all \
            --memory=${_MEMORY} \
            --timeout=${_TIMEOUT} \
            --max-instances=${_MAX_INSTANCES} \
            --min-instances=${_MIN_INSTANCES} \
            --set-env-vars=ENVIRONMENT=${_ENVIRONMENT},ACCESS_TYPE=authenticated \
            --verbosity=info
          
          echo "✅ 新規関数作成完了"
        else
          echo "既存サービスが見つかったため、このステップをスキップします"
        fi
    id: 'create-service'
    waitFor: ['check-service']


substitutions:
  _REGION: 'asia-northeast1'
  _MEMORY: '256Mi'
  _TIMEOUT: '60s'
  _MAX_INSTANCES: '5'
  _MIN_INSTANCES: '0'
  _ENVIRONMENT: 'development'

options:
  machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY

timeout: '1200s'