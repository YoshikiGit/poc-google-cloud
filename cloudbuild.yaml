steps:
  # ステップ1: 現在の設定確認
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "=== 現在の設定確認 ==="
        if gcloud run services describe hello-world --region=${_REGION} 2>/dev/null; then
          echo "既存サービスが見つかりました。上書き更新します。"
          gcloud run services describe hello-world --region=${_REGION} \
            --format="table(
              status.url,
              status.ingress,
              spec.template.spec.containers[0].resources.limits.memory,
              spec.template.spec.timeoutSeconds,
              spec.template.metadata.annotations['autoscaling.knative.dev/maxScale']
            )"
        else
          echo "新規デプロイを実行します。"
        fi
        echo ""
    id: 'check-current'

  # ステップ2: 設定値を確認してからデプロイ/更新
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "=== 置換変数の確認 ==="
        echo "リージョン: ${_REGION}"
        echo "メモリ: ${_MEMORY}"
        echo "タイムアウト: ${_TIMEOUT}"
        echo "最大インスタンス: ${_MAX_INSTANCES}"
        echo "最小インスタンス: ${_MIN_INSTANCES}"
        echo "環境: ${_ENVIRONMENT}"
        echo ""
        
        echo "=== Cloud Run Functions 上書きデプロイ ==="
        gcloud functions deploy hello-world \
          --gen2 \
          --runtime=python311 \
          --region=${_REGION} \
          --source=. \
          --entry-point=hello_world \
          --trigger=http \
          --allow-unauthenticated \
          --ingress-settings=internal-and-gclb \
          --memory=${_MEMORY} \
          --timeout=${_TIMEOUT} \
          --max-instances=${_MAX_INSTANCES} \
          --min-instances=${_MIN_INSTANCES} \
          --set-env-vars=ENVIRONMENT=${_ENVIRONMENT},ACCESS_TYPE=internal-only \
          --verbosity=info
        
        echo ""
        echo "=== 上書き後の設定確認 ==="
        gcloud run services describe hello-world --region=${_REGION} \
          --format="table(
            status.url,
            status.ingress,
            spec.template.spec.containers[0].resources.limits.memory,
            spec.template.spec.timeoutSeconds,
            spec.template.metadata.annotations['autoscaling.knative.dev/maxScale'],
            spec.template.metadata.annotations['autoscaling.knative.dev/minScale']
          )"
    id: 'update-functions'
    waitFor: ['check-current']

  # ステップ3: 設定値検証
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "=== 設定値検証 ==="
        
        MEM_RESULT=$(gcloud run services describe hello-world --region=${_REGION} --format="value(spec.template.spec.containers[0].resources.limits.memory)")
        TIMEOUT_RESULT=$(gcloud run services describe hello-world --region=${_REGION} --format="value(spec.template.spec.timeoutSeconds)")
        MAX_RESULT=$(gcloud run services describe hello-world --region=${_REGION} --format="value(spec.template.metadata.annotations['autoscaling.knative.dev/maxScale'])")
        
        echo "✓ メモリ設定: 期待=${_MEMORY} → 実際=${MEM_RESULT}"
        echo "✓ タイムアウト設定: 期待=${_TIMEOUT} → 実際=${TIMEOUT_RESULT}s"
        echo "✓ 最大インスタンス設定: 期待=${_MAX_INSTANCES} → 実際=${MAX_RESULT}"
        
    id: 'validate-settings'
    waitFor: ['update-functions']

substitutions:
  _REGION: 'asia-northeast1'
  _MEMORY: '256Mi'
  _TIMEOUT: '60s'
  _MAX_INSTANCES: '5'
  _MIN_INSTANCES: '0'
  _ENVIRONMENT: 'development'

options:
  machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY

timeout: '1200s'